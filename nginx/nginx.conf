# 主进程配置（Main Context）
# 指定运行 Nginx 的用户和用户组
user  www-data;
# 自动设置工作进程数量为CPU核心数
worker_processes  auto;
# 自动分配CPU核心
worker_cpu_affinity auto;
# 设置进程优先级
worker_priority 19;
# 设置工作进程整体最大打开的文件描述符数量
worker_rlimit_nofile 51200;
# 错误日志配置，设置日志级别为 error
error_log  /usr/local/nginx/logs/nginx.error.log crit;
# 设置 pid 文件存放路径
pid        /var/run/nginx.pid;
# events 模块配置（Events Context）
events {
    # 设置是否启用accept锁 提高性能 防止惊群现象 防止同时唤醒所有worker
    accept_mutex on; # 高并发可以 设置 off
    # 设置是否允许多个连接同时处理
    multi_accept on;
    # 设置每个工作进程的最大连接数
    worker_connections 10240;
}
# HTTP 核心模块配置（HTTP Context）
http {
    # 禁止直接访问 IP 地址
    server {
        listen 80;
        listen 443 ssl;
        server_name _;  # 匹配任何没有域名的请求
        return 444;  # 无响应，关闭连接
    }
    # MIME 类型配置
    include       /usr/local/nginx/conf/mime.types;
    default_type  application/octet-stream;

    # 访问日志格式定义
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$request_time $upstream_response_time';
    # 访问日志配置
    # access_log  /usr/local/nginx/logs/nginx.access.log main buffer=128k flush=5s;
    access_log  off;
    

    # HTTP/2 相关配置
    http2 on;
    # SSL 证书配置（仅需要配置证书路径，其他 SSL 参数继承全局配置）
    ssl_certificate /usr/local/nginx/ssl/nginx.crt;
    ssl_certificate_key /usr/local/nginx/ssl/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    error_page 497  https://$host$request_uri;


    # 设置 server_names_hash_bucket_size 大小
    server_names_hash_bucket_size 512;
    # 设置客户端请求头缓冲区大小
    client_header_buffer_size 32k;
    # 设置客户端请求头缓冲区数量
    large_client_header_buffers 4 32k;
    # 设置客户端请求体最大大小 上传文件
    client_max_body_size 256m;
    # 设置客户端请求体缓冲区大小
    client_body_buffer_size 128k;


    # 禁用在错误页面和服务器响应头中显示 Nginx 版本号
    server_tokens off;
    # 启用 sendfile 提高性能
    sendfile on;
    # 启用 tcp_nopush 提高性能
    tcp_nopush on;
    # 启用 tcp_nodelay 提高性能
    tcp_nodelay on;
    # 设置 keepalive 连接超时时间
    keepalive_timeout 65;


    # fastcgi 缓存配置
    fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=wordpress:200m max_size=4g inactive=1d use_temp_path=off;
    # fastcgi 缓存 key
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    # 与 FastCGI 服务器通信期间发生错误时可以使用过时的缓存响应的情况
    fastcgi_cache_use_stale error timeout updating invalid_header http_500 http_503;
    ###### 忽略缓存头
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    # fastcgi 对 200 301 302 缓存有效时间 1天
    fastcgi_cache_valid 200 301 302 1d;


    # fastcgi 缓存最小使用次数
    fastcgi_cache_min_uses 1;
    # # fastcgi 缓存锁
    # fastcgi_cache_lock on;
    # fastcgi 缓存重新验证
    fastcgi_cache_revalidate on;
    # fastcgi 缓存后台更新
    fastcgi_cache_background_update on;


    # 设置 fastcgi 连接超时时间
    fastcgi_connect_timeout 300;
    # 设置 fastcgi 发送超时时间
    fastcgi_send_timeout 300;
    # 设置 fastcgi 读取超时时间
    fastcgi_read_timeout 300000;
    # 设置 fastcgi 缓冲区大小
    fastcgi_buffer_size 64k;
    # 设置 fastcgi 缓冲区数量
    fastcgi_buffers 4 64k;
    # 设置 fastcgi 繁忙缓冲区大小
    fastcgi_busy_buffers_size 128k;
    # 设置 fastcgi 临时文件写入大小
    fastcgi_temp_file_write_size 256k;
    # 启用 fastcgi 错误拦截
    fastcgi_intercept_errors on;


    # Gzip压缩
    gzip on;
    gzip_static on;
    gzip_vary on;

    gzip_comp_level 4;
    gzip_buffers 8 256k;
    gzip_min_length 50;
    gzip_types application/atom+xml application/javascript application/json application/vnd.api+json application/rss+xml
                application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype
                application/x-font-ttf application/x-javascript application/xhtml+xml application/xml
                font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon
                image/x-icon image/x-win-bitmap text/css text/richtext text/plain text/x-script
                text/x-component text/x-java-source text/x-markdown text/javascript text/xml
                application/x-perl application/x-httpd-cgi multipart/bag multipart/mixed application/wasm;


    # 连接数限制配置
    limit_req_zone $binary_remote_addr zone=wordpress_req:10m rate=80r/s;
    limit_conn_zone $binary_remote_addr zone=wordpress_conn:10m;
    # 限制下载速度
    # limit_rate 10m;

    # phpMyAdmin
    server{
        listen 8081 ssl;
        server_name localhost;
        root /wwwroot/phpMyAdmin;
        index index.php index.html;
        # 限制请求频率
        limit_req zone=wordpress_req burst=100 nodelay;
        # 限制连接数
        # limit_conn wordpress_conn 200;
        # PHP
        location ~ [^/]\.php(/|$){
            try_files $uri =404;
            include fastcgi_params;
            fastcgi_pass unix:/run/php-fpm.sock;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            # 安全headers
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Strict-Transport-Security "max-age=31536000" always;
        }
        location ~ /tmp/ {
            return 403;
        }
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
            expires      30d;
        }
        location ~ .*\.(js|css)?$ {
            expires      12h;
        }
        location ~ /\. {
            deny all;
        }
        # access_log  /usr/local/nginx/logs/phpMyAdmin.access.log main;
    }
    # 
    include /usr/local/nginx/conf.d/*.conf;
}
